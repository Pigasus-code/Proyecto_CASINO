@startuml CasinoDiagram

package "Casino" {
    class Casino {
        - __nombre: str
        - __direccion: str
        - __codigo: int
        - __estado: str
        + nombre: str
        + direccion: str
        + codigo: int
        + estado: str
        + activar(): bool
        + desactivar(): bool
        + __str__(): str
    }

    class GestorCasino {
        - __casinos: list
        + buscar_casino(codigo: int): Casino
        + agregar_casino(nombre: str, direccion: str, codigo: int): bool
        + modificar_casino(codigo: int, atributo: str, nuevo_dato: any): bool
        + activar_casino(codigo: int): bool
        + desactivar_casino(codigo: int): bool
        + filtro_por_activos(): list
        + filtro_por_inactivos(): list
        + lista_casinos(): list
    }
}

package "Maquina" {
    class Maquina {
        - __marca: str
        - __modelo: str
        - __serial: str
        - __asset: int
        - __casino: Casino
        - __denominacion: float
        - __estado: str
        + marca: str
        + modelo: str
        + serial: str
        + asset: int
        + casino: Casino
        + denominacion: float
        + estado: str
        + activar(): bool
        + desactivar(): bool
        + __str__(): str
    }

    class GestorMaquina {
        - __maquinas: list
        + buscar_maquina(asset: int): Maquina
        + agregar_maquina(marca: str, modelo: str, serial: str, asset: int, casino: Casino, denominacion: float): bool
        + modificar_maquina(asset: int, atributo: str, nuevo_dato: any): bool
        + activar_maquina(asset: int): bool
        + desactivar_maquina(asset: int): bool
        + lista_maquinas(): list
    }
}

package "Usuario" {
    abstract class Usuario {
        - __usuario: str
        - __contraseña: str
        - __nombre: str
        - __telefono: str
        - __tipo: str
        - __estado: str
        + usuario: str
        + contraseña: str
        + nombre: str
        + telefono: str
        + tipo: str
        + estado: str
        + activar(): bool
        + desactivar(): bool
        + __str__(): str
    }

    class Administrador {
        + __init__(usuario: str, contraseña: str, nombre: str, telefono: str)
        + __str__(): str
    }

    class Operador {
        + __init__(usuario: str, contraseña: str, nombre: str, telefono: str)
        + __str__(): str
    }

    class Soporte {
        + __init__(usuario: str, contraseña: str, nombre: str, telefono: str)
        + __str__(): str
    }

    class GestorUsuario {
        - __usuarios: list
        + crear_usuario(usuario: str, contraseña: str, nombre: str, telefono: str, tipo: str): bool
        + modificar_usuario(usuario: str, atributo: str, nuevo_dato: any): bool
        + activar_usuario(usuario: str): bool
        + desactivar_usuario(usuario: str): bool
    }

}

package "CuadreCasino" {
    class CuadreCasino {
        - __in_: float
        - __out: float
        - __jackpot: float
        - __billetero: float
        - __utilidad: float
        - __casino: Casino
        + in_: float
        + out: float
        + jackpot: float
        + billetero: float
        + utilidad: float
        + casino: Casino
        + __str__(): str
    }

    class GestorCuadreCasino {
        - __cuadre_casino: list
        + total_contadores_por_casino(fecha_inicio: str, fecha_fin: str, codigo_casino: int, lista_contadores: list): tuple
        + calculo_utilidad_por_casino(fecha_inicio: str, fecha_fin: str, codigo_casino: int, lista_contadores: list): float
        + guardar_resultados(contadores: tuple, utilidad: float, casino: Casino): bool
        + lista_cuadre_casino(): list
    }
}

package "CuadreMaquina" {
    class CuadreMaquina {
        - __in_: float
        - __out: float
        - __jackpot: float
        - __billetero: float
        - __utilidad: float
        - __maquina: Maquina
        + in_: float
        + out: float
        + jackpot: float
        + billetero: float
        + utilidad: float
        + maquina: Maquina
        + __str__(): str
    }

    class GestorCuadreMaquina {
        - __cuadre_maquina: list
        + calculo_total_contadores(fecha_inicio: str, fecha_fin: str, asset_maquina: int, lista_contadores: list): tuple
        + calculo_utilidad_maquina(fecha_inicio: str, fecha_fin: str, asset_maquina: int, lista_contadores: list): float
        + guardar_resultados(contadores: tuple, utilidad: float, maquina: Maquina): bool
        + lista_cuadre_quina(): list
    }
}

package "Reporte" {
    class GestorReporte {
        + generar_reporte_personalizado(filtros_maquina: list, filtros_casino: list, contadores: list, fecha_inicio: str, fecha_fin: str, formato: str): object
        + generar_reporte_individual_maquina(asset_maquina: int, contadores: list, formato: str): object
        + generar_reporte_individual_casino(codigo_casino: int, maquinas: list, contadores: list, formato: str): object
        + generar_reporte_consolidado(contadores: list, fecha_inicio: str, fecha_fin: str, formato: str): object
        + generar_reporte_especial(codigo_casino: int, maquinas: list, asset_maquinas: list, porcentaje: float, formato: str): object
    }
}

package "Contador" {
    class Contador {
        - __fecha: str
        - __maquina: Maquina
        - __casino: Casino
        - __in: float
        - __out: float
        - __jackpot: float
        - __billetero: float
        + fecha: str
        + maquina: Maquina
        + casino: Casino
        + in_: float
        + out: float
        + jackpot: float
        + billetero: float
        + __str__(): str
    }

    class GestorContador {
        - __contadores: list
        + agregar_registro_contador(fecha: str, maquina: Maquina, casino: Casino, in_: float, out: float, jackpot: float, billetero: float): bool
        + modificar_contador(casino: Casino, fecha: str, atributo: str, nuevo_dato: any): bool
        + mostrar_contadores_por_rango(fecha_inicio: str, fecha_fin: str, lista_contadores: list): tuple
        + lista_contadores(): list
    }
}

class GestorPrincipal {
    - __gestor_maquina: GestorMaquina
    - __gestor_casino: GestorCasino
    - __gestor_contador: GestorContador
    - __gestor_cuadre_maquina: GestorCuadreMaquina
    - __gestor_cuadre_casino: GestorCuadreCasino
    - __gestor_reporte: GestorReporte
    - __gestor_usuario: GestorUsuario

    + agregar_maquina(marca: str, modelo: str, serial: str, asset: int, codigo_casino: int, denominacion: float): bool
    + modificar_maquina(asset: int, atributo: str, nuevo_dato: any): bool
    + activar_maquina(asset: int): bool
    + desactivar_maquina(asset: int): bool
    + agregar_casino(nombre: str, direccion: str, codigo: int): bool
    + mosdificar_casino(codigo: int, atributo: str, nuevo_dato: any): bool
    + activar_casino(codigo: int): bool
    + desactivar_casino(codigo: int): bool
    + filtrar_casinos(filtro: str): list
    + lista_casinos(): list
    + lista_maquinas(casino_codigo: int): list
    + agregar_registro_contador(fecha: str, maquina_asset: int, casino_codigo: int, in_: float, out: float, jackpot: float, billetero: float): bool
    + modificar_contador(casino_codigo: int, fecha: str, atributo: str, nuevo_dato: any): bool
    + mostrar_contadores(fecha_inicio: str, fecha_fin: str): list
    + lista_contadores(): list
    + calculo_total_contadores(fecha_inicio: str, fecha_fin: str, asset_maquina: int): tuple
    + calculo_utilidad_maquina(fecha_inicio: str, fecha_fin: str, asset_maquina: int): float
    + guardar_resultados_maquina(contadores: tuple, utilidad: float, asset_maquina: int): bool
    + total_contadores_por_casino(fecha_inicio: str, fecha_fin: str, codigo_casino: int): tuple
    + calculo_utilidad_por_casino(fecha_inicio: str, fecha_fin: str, codigo_casino: int): float
    + guardar_resultados_casino(contadores: tuple, utilidad: float, codigo_casino: int): bool
    + generar_reporte_personalizado(filtros_maquina: list, filtros_casino: list, fecha_inicio: str, fecha_fin: str, formato: str): object
    + generar_reporte_individual_maquina(asset_maquina: int, formato: str): object
    + generar_reporte_individual_casino(codigo_casino: int, formato: str): object
    + generar_reporte_consolidado(fecha_inicio: str, fecha_fin: str, formato: str): object
    + generar_reporte_especial(codigo_casino: int, asset_maquinas: list, porcentaje: float, formato: str): object
    + crear_usuario(usuario: str, contraseña: str, nombre: str, telefono: str, tipo: str): bool
    + modificar_usuario(usuario: str, atributo: str, nuevo_dato: any): bool
    + activar_usuario(usuario: str): bool
    + desactivar_usuario(usuario: str): bool
}

GestorPrincipal --> GestorCasino
GestorPrincipal --> GestorMaquina
GestorPrincipal --> GestorUsuario
GestorPrincipal --> GestorCuadreCasino
GestorPrincipal --> GestorCuadreMaquina
GestorPrincipal --> GestorReporte
GestorPrincipal --> GestorContador
@enduml